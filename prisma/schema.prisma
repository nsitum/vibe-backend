// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  username   String    @unique
  password   String
  pictureUrl String?
  postsLiked String[] // kasnije ćemo ovo refaktorirati, za sad neka bude lista ID-jeva
  createdAt  DateTime  @default(now())
  posts      Post[]
  likes      Like[]
  Comment    Comment[]
}

model Post {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  editedAt  DateTime? // može biti null dok user ne edita
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  likes     Like[]
  comments  Comment[]
}

model Like {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@unique([userId, postId]) // korisnik može lajkati post samo jednom
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}
